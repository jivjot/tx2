CREATE OR REPLACE FUNCTION AppEventRoundInsert(
Event INTEGER,
RoundName VARCHAR,
RoundDesc VARCHAR,
RoundStart timestamp,
RoundDuration INTEGER,
RoundRegUsers INTEGER,
RequestedOperation VARCHAR,
by_user INTEGER,
ip VARCHAR,
OUT result INTEGER,
OUT rescode INTEGER
) RETURNS RECORD AS $$
DECLARE 
    temp INTEGER;
    varrec RECORD;
BEGIN 
temp := 0;


IF EXISTS ( SELECT id FROM "AppEvent_appeventround" WHERE "Event_id"=Event AND "RoundName"=RoundName  AND "RoundStart"=RoundStart ) THEN
	result := 2;
  	rescode := 168;
	RETURN;
END IF;

SELECT * INTO varrec FROM CheckUserForPermission(by_user,RequestedOperation,'appeventround','AppEvent');
IF varrec.result <> 1 THEN
	rescode :=  varrec.rescode;
	result := -2;
	RETURN;
END IF;

INSERT INTO "AppEvent_appeventround"("RoundName","RoundDesc","RoundStart","RoundDuration","Event_id","RoundRegUsers_id")
    			VALUES (RoundName,RoundDesc,RoundStart,RoundDuration,Event,RoundRegUsers);

GET DIAGNOSTICS temp := ROW_COUNT;
IF temp <> 1 THEN 
	rescode := 166;
	result := -1;
        RETURN;
END IF;

SELECT id INTO rescode FROM "AppEvent_appeventround" WHERE "Event_id"=Event AND "RoundName"=RoundName  AND "RoundStart"=RoundStart;


INSERT INTO "AppEvent_appeventlogs"("LogsUser_id", "ContentType_id", "LogsObject", "LogsPermission_id", "LogsIP", "LogsTimeStamp", "LogsDescription")
VALUES (by_user,varrec.var_ctid,rescode,varrec.varpci,ip,now(),'INSERT');
GET DIAGNOSTICS temp := ROW_COUNT;
IF temp <> 1 THEN 
	rescode := 999;
	result := -1;
        RETURN;
ELSE
	result := 1;
RETURN;
END IF;
END;
$$ LANGUAGE plpgsql;


